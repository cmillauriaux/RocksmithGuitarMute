name: Build and Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        # Install Visual C++ Redistributable - direct download method
        Write-Host "Installing Visual C++ Redistributable..."
        $url = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
        $output = "$env:TEMP\vc_redist.x64.exe"
        Write-Host "Downloading from: $url"
        Invoke-WebRequest -Uri $url -OutFile $output
        Write-Host "Installing Visual C++ Redistributable..."
        Start-Process -FilePath $output -ArgumentList "/quiet" -Wait
        Write-Host "Cleaning up..."
        Remove-Item $output
        Write-Host "Visual C++ Redistributable installation completed."
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install specific compatible versions to match local environment
        pip install numpy==1.24.4  # Compatible version for PyTorch
        pip install torch==2.0.1 torchaudio==2.0.2 --extra-index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install PyInstaller
        # Install project dependencies in development mode
        pip install -e rsrtools/
        pip install -e demucs/
        # Install missing critical dependencies
        pip install diffq omegaconf hydra-core>=1.1.0 einops
        # Ensure NumPy compatibility
        pip install --force-reinstall numpy==1.24.4
    
    - name: Verify dependencies and fix NumPy
      run: |
        Write-Host "Verifying and fixing dependencies..."
        python -c "
        import sys
        print(f'Python executable: {sys.executable}')
        
        # Test numpy import and fix if needed
        try:
            import numpy as np
            print(f'NumPy version: {np.__version__}')
            # Test the problematic import
            import numpy.core.multiarray
            print('✅ numpy.core.multiarray: OK')
        except ImportError as e:
            print(f'❌ NumPy import failed: {e}')
            print('Attempting to fix NumPy installation...')
            import subprocess
            subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'numpy'], check=False)
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'numpy==1.24.4', '--force-reinstall'], check=True)
            # Test again
            import numpy as np
            import numpy.core.multiarray
            print(f'✅ NumPy fixed! Version: {np.__version__}')
        
        # Test torch
        import torch
        print(f'PyTorch version: {torch.__version__}')
        
        # Test torchaudio
        import torchaudio
        print(f'TorchAudio version: {torchaudio.__version__}')
        
        # Test demucs with more detailed error reporting
        try:
            import demucs
            print(f'Demucs version: {demucs.__version__}')
            
            # Test model loading
            import demucs.pretrained
            print('Testing model loading...')
            model = demucs.pretrained.get_model('htdemucs_6s')
            print('✅ htdemucs_6s model loaded successfully')
            
        except Exception as e:
            print(f'❌ Demucs test failed: {e}')
            import traceback
            traceback.print_exc()
        
        # Test soundfile
        import soundfile
        print(f'SoundFile version: {soundfile.__version__}')
        
        print('Dependency verification completed')
        "
    
    - name: Download Demucs models
      run: |
        Write-Host "Downloading essential Demucs models..."
        python -c "
        import demucs.pretrained
        import os
        import torch
        import numpy as np
        
        # Test NumPy compatibility first
        print(f'NumPy version: {np.__version__}')
        try:
            # Test the problematic import
            import numpy.core.multiarray
            print('✅ numpy.core.multiarray import successful')
        except ImportError as e:
            print(f'❌ numpy.core.multiarray import failed: {e}')
            # Try alternative import
            try:
                import numpy.core._multiarray_umath
                print('✅ Alternative numpy import successful')
            except ImportError as e2:
                print(f'❌ Alternative numpy import also failed: {e2}')
        
        # Créer le dossier de cache s'il n'existe pas
        cache_dir = os.path.expanduser('~/.cache/torch/hub/checkpoints')
        os.makedirs(cache_dir, exist_ok=True)
        
        # Télécharger les modèles essentiels avec gestion d'erreur améliorée
        models = ['htdemucs_6s']  # Start with the working model only
        for model in models:
            try:
                print(f'Downloading model: {model}')
                model_obj = demucs.pretrained.get_model(model)
                print(f'Successfully downloaded and loaded: {model}')
                # Test model loading
                print(f'Model device: {next(model_obj.parameters()).device}')
            except Exception as e:
                print(f'Error downloading {model}: {e}')
                import traceback
                traceback.print_exc()
        
        # Test additional models separately
        additional_models = ['htdemucs', 'mdx_extra_q']
        for model in additional_models:
            try:
                print(f'Attempting to download model: {model}')
                model_obj = demucs.pretrained.get_model(model)
                print(f'Successfully downloaded: {model}')
            except Exception as e:
                print(f'Warning: Failed to download {model}: {e}')
                # Don't fail the build for optional models
        
        print('Model download phase completed')
        "
        Write-Host "Demucs models download completed"
    
    - name: Clean build directories
      run: |
        cd build
        python build_windows.py --clean-only
    
    - name: Build executable
      run: |
        cd build
        python build_windows.py --onefile --optimize
      env:
        GITHUB_ACTIONS: 'true'
    
    - name: Verify build output
      run: |
        if (Test-Path "build/dist/RockSmithGuitarMute.exe") {
          Write-Host "Build successful - executable found"
          $size = (Get-Item "build/dist/RockSmithGuitarMute.exe").Length / 1MB
          Write-Host "Executable size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "Build failed - executable not found"
          Write-Host "Contents of build/dist/:"
          if (Test-Path "build/dist") {
            Get-ChildItem -Recurse "build/dist" | ForEach-Object { Write-Host "  $($_.FullName)" }
          }
          exit 1
        }
    
    - name: Test executable functionality
      run: |
        Write-Host "Testing executable functionality..."
        cd build/dist
        
        # Test 1: Basic executable analysis
        Write-Host "Test 1: Executable analysis"
        $exeSize = (Get-Item ".\RockSmithGuitarMute.exe").Length / 1MB
        Write-Host "Executable size: $([math]::Round($exeSize, 1)) MB"
        
        if ($exeSize -gt 200) {
            Write-Host "✅ Executable size suggests all dependencies are included"
        } elseif ($exeSize -gt 100) {
            Write-Host "⚠️  Executable size acceptable but may be missing some dependencies"
        } else {
            Write-Host "❌ Executable size too small - likely missing critical dependencies"
        }
        
        # Test 2: Run our dedicated test script
        Write-Host "`nTest 2: Running import tests"
        Copy-Item "..\test_executable.py" "test_executable.py"
        
        try {
            python test_executable.py
            if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Import test passed"
            } else {
                Write-Host "⚠️  Import test had warnings (exit code: $LASTEXITCODE)"
            }
        } catch {
            Write-Host "❌ Import test failed: $($_.Exception.Message)"
        }
        
        # Test 3: Strings analysis for critical components
        Write-Host "`nTest 3: Critical components check"
        try {
            $patterns = @("numpy", "torch", "demucs", "htdemucs_6s", "python")
            $foundComponents = @()
            
            foreach ($pattern in $patterns) {
                $found = Select-String -Path ".\RockSmithGuitarMute.exe" -Pattern $pattern -Quiet
                if ($found) {
                    $foundComponents += $pattern
                }
            }
            
            Write-Host "Found components: $($foundComponents -join ', ')"
            if ($foundComponents.Count -ge 3) {
                Write-Host "✅ Critical components found in executable"
            } else {
                Write-Host "⚠️  Some critical components may be missing"
            }
        } catch {
            Write-Host "⚠️  Could not analyze executable strings"
        }
        
        Write-Host "`nExecutable testing completed"
    
    - name: Create release archive
      run: |
        cd build/dist
        # Create a zip file with all distribution files
        Compress-Archive -Path * -DestinationPath "../../RockSmithGuitarMute-Windows.zip"
        cd ../..
        Write-Host "Archive created: RockSmithGuitarMute-Windows.zip"
        $archiveSize = (Get-Item "RockSmithGuitarMute-Windows.zip").Length / 1MB
        Write-Host "Archive size: $([math]::Round($archiveSize, 1)) MB"
    
    - name: Generate release tag
      id: tag
      run: |
        $timestamp = Get-Date -Format "yyyy-MM-dd-HHmm"
        $shortSha = "${{ github.sha }}".Substring(0, 7)
        $tag = "v$timestamp-$shortSha"
        echo "tag=$tag" >> $env:GITHUB_OUTPUT
        echo "Generated tag: $tag"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: "RockSmith Guitar Mute ${{ steps.tag.outputs.tag }}"
        body: |
          Automatic release from commit ${{ github.sha }}
          
          ## Changes
          - Built from latest master branch
          - Commit: ${{ github.sha }}
          - Build date: ${{ github.event.head_commit.timestamp }}
          
          ## Installation
          1. Download `RockSmithGuitarMute-Windows.zip`
          2. Extract the archive
          3. Run `install.bat` as administrator for system installation
          4. Or run `RockSmithGuitarMute.exe` directly
          
          ## System Requirements
          - Windows 10/11 (64-bit)
          - 8 GB RAM minimum (16 GB recommended)
          - 2 GB free disk space
          - Multi-core processor recommended
          - NVIDIA GPU with CUDA support (optional, for acceleration)
        files: |
          RockSmithGuitarMute-Windows.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RockSmithGuitarMute-Windows
        path: |
          build/dist/
          RockSmithGuitarMute-Windows.zip
        retention-days: 30
